/*
 * File: app/view/Lobby.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bma.view.Lobby', {
    extend: 'Ext.form.Panel',

    config: {
        layout: {
            type: 'card'
        },
        items: [
            {
                xtype: 'titlebar',
                docked: 'top',
                title: 'Lobby',
                items: [
                    {
                        xtype: 'button',
                        itemId: 'logoutButton',
                        text: 'Logout'
                    }
                ]
            },
            {
                xtype: 'list',
                id: 'messageList',
                padding: 0,
                layout: {
                    type: 'fit'
                },
                itemTpl: [
                    '<div>{message}</div>'
                ],
                store: 'Lobby'
            },
            {
                xtype: 'button',
                docked: 'bottom',
                itemId: 'messageSend',
                ui: 'confirm',
                text: 'Send'
            },
            {
                xtype: 'textfield',
                docked: 'bottom',
                label: 'Message',
                name: 'message'
            }
        ],
        listeners: [
            {
                fn: 'onLogoutButtonTap',
                event: 'tap',
                delegate: '#logoutButton'
            },
            {
                fn: 'onMessageSendTap',
                event: 'tap',
                delegate: '#messageSend'
            }
        ]
    },

    onLogoutButtonTap: function(button, e, options) {
        console.log("Button Pressed: logout");

        Ext.io.Io.getCurrentUser({
            success: function(user) {
                //If user is logged in
                if(user) {

                    // We need to clear out the local copy of the user's data on logout
                    var messageStore = Ext.create('bma.store.Lobby', {storeId: 'lobbyStore'});
                    if(messageStore) {
                        messageStore.getProxy().clear();
                    }
                    console.log("Logging out...");
                    user.logout();
                    Ext.Viewport.setActiveItem(Ext.create('bma.view.Main'));
                }
            }
        });
    },

    onMessageSendTap: function(button, e, options) {
        var values = this.getValues();
        if (values.message) {
            //this.setValue('message', '');

            Ext.io.Io.getCurrentUser({
                success: function(user) {
                    user.send({
                        message: values.message,
                        callback: function() {
                            console.log("messageSend callback", arguments);

                            var record = {
                                message: values.message,
                                userID: user.key,
                                from: "ME",
                                date: new Date().getTime()
                            };

                            console.log("saving message", record);
                            messageStore = Ext.getStore('lobbyStore');
                            messageStore.add(record);
                            messageStore.sync();

                            //msgField.setValue("");
                        }
                    });
                }
            });
        }
    }

});